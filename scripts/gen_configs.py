#!/usr/bin/env python3
import json
from pathlib import Path


ROOT = Path(__file__).resolve().parents[1]
CLASSES_JSON = ROOT / "labels/classes.json"


def load_classes():
    data = json.loads(CLASSES_JSON.read_text(encoding="utf-8"))
    # sort by id just in case
    data = sorted(data, key=lambda x: int(x["id"]))
    # validate ids = 0..N-1
    ids = [int(x["id"]) for x in data]
    assert ids == list(range(len(ids))), f"IDs must be 0..N-1, got {ids}"
    return data


def write_dataset_yaml(classes):
    names = [c["slug"] for c in classes]
    text = "names:\n" + "\n".join([f"  {i}: {n}" for i, n in enumerate(names)]) + "\n"
    out = ROOT / "dataset/data.yaml"
    out.parent.mkdir(parents=True, exist_ok=True)
    out.write_text(text, encoding="utf-8")


def write_label_studio_xml(classes):
    labels = "\n".join([f"    <Label value=\"{c['slug']}\" background=\"#7a7a7a\"/>" for c in classes])
    xml = f"""
<View>
  <Image name=\"image\" value=\"$image\" zoom=\"true\" rotateControl=\"true\"/>
  <PolygonLabels name=\"label\" toName=\"image\">\n{labels}
  </PolygonLabels>
  <BrushLabels name=\"brush\" toName=\"image\">\n{labels}
  </BrushLabels>
</View>
""".strip()
    out = ROOT / "docs/label_studio_config.xml"
    out.write_text(xml, encoding="utf-8")


def write_cvat_yaml(classes):
    lines = ["labels:"] + [f"  - name: {c['slug']}\n    attributes: []" for c in classes]
    out = ROOT / "docs/cvat_labels.yaml"
    out.write_text("\n".join(lines) + "\n", encoding="utf-8")


def write_labels_map_py(classes):
    lines = ["# autogenerated from labels/classes.json", "CLASSES = ["]
    for c in classes:
        lines.append(f"    {{'id': {int(c['id'])}, 'slug': '{c['slug']}', 'display_name': '{c['display_name']}' }},")
    lines.append("]\n\nID_TO_SLUG = {c['id']: c['slug'] for c in CLASSES}\nSLUG_TO_ID = {c['slug']: c['id'] for c in CLASSES}\n")
    out = ROOT / "backend/app/labels_map.py"
    out.write_text("\n".join(lines), encoding="utf-8")


def write_class_index_md(classes):
    lines = ["# CLASS_INDEX", "", "| id | slug | display_name |", "|---:|------|--------------|"]
    for c in classes:
        lines.append(f"| {int(c['id'])} | {c['slug']} | {c['display_name']} |")
    out = ROOT / "docs/CLASS_INDEX.md"
    out.write_text("\n".join(lines) + "\n", encoding="utf-8")


def unit_check(classes):
    # verify dataset/data.yaml ordering
    data_yaml = (ROOT / "dataset/data.yaml").read_text(encoding="utf-8")
    names_order = [line.split(":", 1)[1].strip() for line in data_yaml.splitlines() if line.strip() and not line.startswith("names:")]
    assert names_order == [c["slug"] for c in classes], "dataset/data.yaml names order mismatch"
    # verify labels_map ids
    lm = (ROOT / "backend/app/labels_map.py").read_text(encoding="utf-8")
    for c in classes:
        assert c["slug"] in lm and f"'id': {int(c['id'])}" in lm, "labels_map mismatch"


def main():
    classes = load_classes()
    write_dataset_yaml(classes)
    write_label_studio_xml(classes)
    write_cvat_yaml(classes)
    write_labels_map_py(classes)
    write_class_index_md(classes)
    unit_check(classes)
    print("[ok] generated configs from labels/classes.json")


if __name__ == "__main__":
    main()


